#!/usr/bin/env python3
import argparse
import logging
import datetime
import getpass

def main():
    parser = argparse.ArgumentParser(description='Prepare a CA certificate header for a Toluene device')
    parser.add_argument('-v', '--verbose', help='verbose output', action='store_true')
    parser.add_argument('-o', '--output', help='the output file', required=True, dest='output')
    parser.add_argument('certificate', help='the certificate to be converted to a header')
    args = parser.parse_args()

    # Set verbosity, globally.
    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    logging.basicConfig(format='%(asctime)s - %(name)s:%(levelname)s:%(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=log_level)

    logging.debug('Writing to output file {}, reading from {}'.format(args.output, args.certificate))

    with open(args.certificate, 'rb') as cert:
        der_cert = cert.read()

    now = datetime.datetime.now()

    with open(args.output, 'wt+') as header:
        header.write('#pragma once\n\n')
        header.write('/*\n')
        header.write(' * THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT \n')
        header.write(' * Generated on {} by {}\n'.format(now.isoformat(), getpass.getuser()))
        header.write(' */\n\n')
        header.write('#include <stdint.h>\n\n')
        header.write('static const uint8_t ca_cert_der[] = {\n')

        for i in range(0, len(der_cert), 16):
            logging.debug('Writing line {}'.format(i))
            slice_bytes = der_cert[i:i+16]
            if len(slice_bytes) == 16:
                header.write('    0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x}, 0x{:02x},\n'.format(
                    slice_bytes[0], slice_bytes[1], slice_bytes[2], slice_bytes[3],
                    slice_bytes[4], slice_bytes[5], slice_bytes[6], slice_bytes[7],
                    slice_bytes[8], slice_bytes[9], slice_bytes[10], slice_bytes[11],
                    slice_bytes[12], slice_bytes[13], slice_bytes[14], slice_bytes[15]))
            else:
                header.write('   ')
                for b in slice_bytes:
                    header.write(' 0x{:02x},'.format(b))
                header.write('\n')

        header.write('};\n')

        header.write('\n')

if __name__ == '__main__':
    main()

